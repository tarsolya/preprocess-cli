#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var optimist = require('optimist');
var pp = require('preprocess');

var argv = optimist
  .usage('Usage: $0 <file> [options]')

  .alias('o', 'output-file')
  .string('o')
  .describe('o', 'Output file')

  .alias('s', 'file-not-found-silent-fail')
  .boolean('s')
  .describe('s', "Instruct preprocess to fail silently.")
  .default('s', false)

  .string('src-dir')
  .describe('src-dir', 'The directory where to look for files included. Defaults to process.cwd().')

  .string('src-eol')
  .describe('src-eol', "The end of line (EOL) character to use for the preprocessed result.")

  .alias('t', 'type')
  .string('t')
  .describe('t', 'The syntax type of source string to preprocess.')
  .default('t', 'html')

  .alias('c', 'context')
  .string('c')
  .describe('c', 'Context file: must be js or json. Defaults to process.env.')

  .argv;

if (argv._.length === 0 || argv.help) {
  console.log(optimist.help());
  process.exit();
}

// paths
var sourcePath = path.resolve(argv._[0]);

var outPath;

if (argv.o) {
  outPath = path.resolve(argv.o);
}

var contextPath;

if (argv.c) {
  contextPath = path.resolve(argv.c);
}

// options
var options = {
  fileNotFoundSilentFail: argv.s,
  srcDir: path.resolve(argv['src-dir'] || process.cwd()),
  type: argv.t
};

if (argv['src-eol']) {
  options.srcEol = argv['src-eol'];
}

// context
var context = contextPath ? require(contextPath) : process.env;

// run
if (outPath) {
  pp.preprocessFileSync(sourcePath, outPath, context, options);
} else {
  var source = fs.readFileSync(sourcePath);
  console.log(pp.preprocess(source, context, options));
}
